Step 1: Setup Tailwind and install Daisy UI
    resource: https://tailwindcss.com/docs/guides/create-react-app
    -follow steps for Tailwind using link
    -npm i daisyui
    -in tailwind.config.js plugins:[require('daisyui')],


Step 2: Create React Routes and Navbar
    -install react-router-dom v6
    -https://www.w3schools.com/react/react_router.asp
    -npm i react-router-dom react-icons
    -create components/layout/Navbar.jsx
    -in App.js
    import {BrowserRouter as Router, Route, Routes} from 'react-router-dom';
    // 1.enclose everything in <Router>
    // 2.encolose <Route> with <Routes>
    // 3.each Route will have element={<Component/>} attribute
    
Step 3: Create Footer
    -get current date using new Date().getFullYear()

Step 4: Create React Routes

Step 5: Github API
    set up github api authorisation key
    settings>Developer settings>Personal access tokens>generate new key
    creat .env file in root folder
    create
    REACT_APP_GITHUB_URL
    REACT_APP_GITHUB_TOKEN
    can be accessed using 
    process.env.REACT_APP_GITHUB_TOKEN

Step 6: setUp context to seperate Model from View
    6.1 create ./src/context/github/githubContext.js
        import {createContext, useState} from "react"

        //1. Create context
        const GithubContext=createContext();
        //Global Variables
        ...

        //2. Create Provider
        export const GithubProvider=({childre})=>{
            //2.1 Entity States
            const [users, setUsers]=useState([])
            const [loading, setLoading]=useState(true)

            //2.2 Entity Functions
            const fetchUsers=async()=>{
                const response=await fetch(...)
                const data=await response.json()
                setUsers(data)
                setLoading(false)
            }

            //2.3 Create Context Provider for the Context
            return(
                <GithubContext.provider
                    value={{
                        users,
                        loading,
                        fetchUsers,
                    }}
                >
                </GithubContext.provider>
            )
        }

        export default GithubContext
        
        6.2 in App.js Wrap Context provider around children that needs to access install
        in App.js

        import {GithubProvider} from '../context/github/githubContext'

        function App(){
            ...
            return(
                <GithubProvider>
                    ...
                </GithubProvider>
            )
        }
         
        6.3 now all children has access to the data by using useContext(GithubContext)
        note: GithubContext needs to be imported